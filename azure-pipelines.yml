trigger:
    branches:
        include:
        - master
        - refs/tags/build*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:

    - task: UseDotNet@2 
      displayName: 'Configure .NET Core Version'
      inputs:
        version: '3.1.x'
        packageType: sdk
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'Build'

      ######## TESTS
   # - task: DotNetCoreCLI@2
    #  displayName: "Test"
     # inputs:
      #  command: test
       # projects: 'VBaseProject.Test/VBaseProject.Test.csproj'
        #arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[VBaseProject.*]*" /p:Exclude="[*Test]*"'
    
    - task: codecoveragecomparerbt@1
      displayName: 'Code Coverage'
      inputs:
        codecoveragetarget: '85'
        codecoveragemeasurementmethod: 'Lines'

    - task: DotNetCoreCLI@2
      displayName: "dotnet global test tool install"
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global dotnet-reportgenerator-globaltool'

    - script: dotnet test VBaseProject.Test/VBaseProject.Test.csproj --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/
      displayName: 'dotnet test'

    - script: reportgenerator "-reports:$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml" "-targetDir:$(Build.SourcesDirectory)/TestResults/Coverage/Reports" -tag:$(Build.BuildNumber) -reportTypes:htmlInline
      workingDirectory: $(Build.SourcesDirectory)/WebApp.Web.Tests
      displayName: 'dotnet reportgenerator'
    
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
        failTaskOnFailedTests: true

   #   - task: PublishCodeCoverageResults@1
    #    inputs:
     #     codeCoverageTool: 'cobertura'
      #    summaryFileLocation: $(Build.SourcesDirectory)/TestResults/Coverage/**/coverage.cobertura.xml
       #   reportDirectory: $(Build.SourcesDirectory)/TestResults/Coverage/Reports
        #  failIfCoverageEmpty: false 
      
      #############
    - task: DotNetCoreCLI@2
      displayName: 'Publish artifacts'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-r linux-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Upload Artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'builds'
    
    - task: Docker@2
      displayName: 'Login Docker Hub'
      inputs:
        containerRegistry: 'Docker Hub'
        command: 'login'
    
    - task: Docker@2
      displayName: 'Docker Hub Publish'
      inputs:
        containerRegistry: 'Docker Hub'
        repository: 'vanderlangs/vbaseprojectapi'
        tags: |
            $(Build.BuildId)
            latest
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
